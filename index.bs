<pre class='metadata'>
Title: Media Capabilities
Repository: wicg/media-capabilities
Status: CG-DRAFT
ED: https://wicg.github.io/media-capabilities/
Shortname: media-capabilities
Level: 1
Group: wicg
Editor: Mounir Lamouri, w3cid 45389, Google Inc. https://google.com/

Abstract: This specification intends to provide APIs to allow websites to make
Abstract: an optimal decision when picking media content for the user. The APIs
Abstract: will expose information about the decoding capabilities for a given
Abstract: format but also output capabilities to find the best match based on
Abstract: the device's display.

!Participate: <a href='https://github.com/wicg/media-capabilities'>Git Repository.</a>
!Participate: <a href='https://github.com/wicg/media-capabilities/issues/new'>File an issue.</a>
!Version History: <a href='https://github.com/wicg/media-capabilities/commits'>https://github.com/wicg/media-capabilities/commits</a>
</pre>

<pre class='anchors'>
spec: media-source; urlPrefix: https://w3c.github.io/media-source/
    type: interface
        for: MediaSource; text: MediaSource; url: #media-source
    type: method
        for: MediaSource; text: isTypeSupported(); url: #dom-mediasource-istypesupported

spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/;
    type: method
        urlPrefx: embedded-content.html/
            for: HTMLMediaElement; text: canPlayType(); url: #dom-navigator-canplaytype

spec: ECMAScript; urlPrefix: https://tc39.github.io/ecma262/#
    type: interface
        text: TypeError; url: sec-native-error-types-used-in-this-standard-typeerror

spec: cssom-view; urlPrefix: https://drafts.csswg.org/cssom-view/#
    type: interface
        text: Screen; url: screen
</pre>
<pre class='biblio'>
{
    "media-playback-quality": {
        "href": "https://wicg.github.io/media-playback-quality/",
        "title": "Media Playback Quality Specification",
        "status": "CG-DRAFT",
        "publisher": "WICG"
    }
}
</pre>

<section class='non-normative'>
  <h2 id='introduction'>Introduction</h2>
  <em>This section is non-normative</em>

  <p>
    This specification relies on exposing the following sets of properties:
    <ul>
      <li>
        <p>
          An API to query the user agent with regards to the decoding abilities
          of the device based on information such as the codecs, profile,
          resolution, bitrates, etc. The API exposes information such as whether
          the playback should be smooth and power efficient.
        </p>
        <p>
          The intent of purposes of this decoding capabilities API is to provide
          a powerful replacement to API such as
          {{MediaSource/isTypeSupported()}} or
          {{HTMLMediaElement/canPlayType()}} which are vague and mostly help the
          callers to know if something can not be decoded but not how well it
          should perform.
        </p>
      </li>
      <li>
        <p>
          Better information about the display properties such as supported
          color gamut or dynamic range abilities in order to pick the right
          content for the display and avoid providing HDR content to an SDR
          display.
        </p>
      </li>
      <li>
        <p>
          Real time feedback about the playback so an adaptative streaming can
          alter the quality of the content based on actual user perceived
          quality. Such information will allow websites to react to a pick of
          CPU/GPU usage in real time. It is expected that this will be tacklked
          as part of the [[media-playback-quality]] specification.
        </p>
      </li>
    </ul>
  </p>
</section>

<section>
  <h2 id='decoding-capabilities'>Decoding Capabilities</h2>

  <section>
    <h3 id='media-configurations'>Media Configurations</h3>

    <section>
      <h4 id='mediaconfiguration'>MediaConfiguration</h4>

      <pre class='idl'>
        dictionary MediaConfiguration {
          required MediaConfigurationType type;

          VideoConfiguration video;
          AudioConfiguration audio;
        };
      </pre>
      <p>
        The input to the decoding capabilities is represented by a
        {{MediaConfiguration}} dictionary.
      </p>
      <p>
        A <dfn>valid MediaConfiguration</dfn> MUST contain at least a
        {{VideoConfiguration}} or an {{AudioConfiguration}}.
      </p>
    </section>

    <section>
      <h4 id='mediaconfigurationtype'>MediaConfigurationType</h4>

      <pre class='idl'>
        enum MediaConfigurationType {
          "file",
          "MediaSource",
        };
      </pre>

      <p>
        A {{MediaConfiguration}} has two types:
        <ul>
          <li><dfn for='MediaConfigurationType' enum-value>file</dfn> is used to
          represent a configuration that is meant to be used for a plain file
          playback.</li>
          <li><dfn for='MediaConfigurationType' enum-value>MediaSource</dfn> is
          used to represent a configuration that is meant to be used for
          playback of a {{MediaSource/MediaSource}} as defined in the
          [[media-source]] specification.</li>
        </ul>
      </p>
    </section>

    <section>
      <h4 id='videoconfiguration'>VideoConfiguration</h4>

      <pre class='idl'>
        dictionary VideoConfiguration {
          required DOMString type;
          required unsigned long width;
          required unsigned long height;
          required unsigned long bitrate;
          required double framerate;
        };
      </pre>

      <p>
        The <dfn for='VideoConfiguration' dict-member>type</dfn> member
        represents the MIME type of the video track.
      </p>

      <p>
        A <dfn>valid VideoConfiguration type</dfn> MUST include a media type,
        subtype and full codecs description.
      </p>

      <p>
        The <dfn for='VideoConfiguration' dict-member>width</dfn> and
        <dfn for='VideoConfiguration' dict-member>height</dfn> members represent
        respectively the width and height of the video track.
      </p>

      <p>
        The <dfn for='VideoConfiguration' dict-member>bitrate</dfn> member
        represents the number of average bitrate of the video track. The bitrate
        is the number of bits used to encode a second of the video track.
      </p>

      <p>
        The <dfn for='VideoConfiguration' dict-member>framerate</dfn> member
        represents the framerate of the video track. The framerate is the number
        of frames used in one second (frames per second).
      </p>
    </section>

    <section>
      <h4 id='audioconfiguration'>AudioConfiguration</h4>

      <pre class='idl'>
        dictionary AudioConfiguration {
          required DOMString type;
          DOMString channels;
          unsigned long bitrate;
          unsigned long samplerate;
        };
      </pre>

      <p>
        The <dfn for='AudioConfiguration' dict-member>type</dfn> member
        represents the MIME type of the audio track.
      </p>

      <p>
        A <dfn>valid AudioConfiguration type</dfn> MUST include a media type,
        subtype and full codecs description.
      </p>

      <p>
        The <dfn for='AudioConfiguration' dict-member>channels</dfn> member
        represents the audio channels used by the audio track.
      </p>

      <p class='issue'>
        The {{AudioConfiguration/channels}} needs to be defined as a
        <code>double</code> (2.1, 4.1, 5.1, ...), an <code>unsigned short</code>
        (number of channels) or as an <code>enum</code> value. The current
        definition is a placeholder.
      </p>

      <p>
        The <dfn for='AudioConfiguration' dict-member>bitrate</dfn> member
        represents the number of average bitrate of the audio track. The bitrate
        is the number of bits used to encode a second of the audio track.
      </p>

      <p>
        The <dfn for='AudioConfiguration' dict-member>samplerate</dfn>
        represents the samplerate of the audio track in. The samplerate is the
        number of samples of audio carried per second.
      </p>

      <p class='note'>
        The {{AudioConfiguration/samplerate}} is expressed in <code>Hz</code>
        (ie. number of samples of audio per second). Sometimes the samplerates
        value are expressed in <code>kHz</code> which represents the number of
        thousands of samples of audio per second.<br>
        44100 <code>Hz</code> is equivalent to 44.1 <code>kHz</code>.
      </p>
    </section>
  </section>

  <section>
    <h3 id='media-decoding-ability'>Media Decoding Ability</h3>

    <pre class='idl'>
      interface MediaDecodingAbility {
        readonly attribute boolean supported;
        readonly attribute boolean smooth;
        readonly attribute boolean powerEfficient;
      };
    </pre>

    <p>
      The ability to decode a given {{MediaConfiguration}}
      <var>configuration</var> is represented by a {{MediaDecodingAbility}}
      object.
    </p>

    <p>
      The <dfn for='MediaDecodingAbility' attribute>supported</dfn> attribute
      MUST return <code>false</code> if the user agent is not able to decode the
      media represented by <var>configuration</var>. Otherwise, it MUST return
      <code>true</code>.
    </p>

    <p>
      The <dfn for='MediaDecodingAbility' attribute>smooth</dfn> attribute MUST
      return whether the user agent will be able to decode the media at a pace
      that will allow a smooth playback. If {{MediaDecodingAbility/supported}}
      returns <code>false</code>, the user agent MUST return <code>false</code>.
    </p>

    <p>
      The <dfn for='MediaDecodingAbility' attribute>powerEfficient</dfn>
      attribute MUST return whether the user agent will be able to decode the
      media in a power efficient manner. If {{MediaDecodingAbility/supported}}
      returns <code>false</code>, the user agent MUST return <code>false</code>.
    </p>
  </section>

  <section>
    <h3 id='navigators-extensions'>Navigator and WorkerNavigator extension</h3>

    <pre class='idl'>
      [Exposed=(Window)]
      partial interface Navigator {
        [SameObject] readonly attribute MediaCapabilities mediaCapabilities;
      };
    </pre>
    <pre class='idl'>
      [Exposed=(Worker)]
      partial interface WorkerNavigator {
        [SameObject] readonly attribute MediaCapabilities mediaCapabilities;
      };
    </pre>
  </section>

  <section>
    <h3 id='media-capabilities-interface'>Media Capabilities Interface</h3>

    <pre class='idl'>
      [Exposed=(Window, Worker)]
      interface MediaCapabilities {
        Promise&lt;MediaDecodingAbility&gt; query(MediaConfiguration configuration);
      };
    </pre>

    <p>
      The <dfn for='MediaCapabilities' method>query()</dfn> method MUST run the
      following steps:
      <ol>
        <li>
          If <var>configuration</var> is not a <a>valid MediaConfiguration</a>,
          return a Promise rejected with a <code>TypeError</code>.
        </li>
        <li>
          If <code>configuration.video</code> in non-null and
          <code>configuration.video.type</code> is not a <a>valid
          VideoConfiguration type</a>, return a Promise rejected with a
          <code>TypeError</code>.
        </li>
        <li>
          If <code>configuration.audio</code> in non-null and
          <code>configuration.audio.type</code> is not a <a>valid
          AudioConfiguration type</a>, return a Promise rejected with a
          <code>TypeError</code>.
        </li>
        <li>
          Let <var>p</var> be a new promise.
        </li>
        <li>
          <a>In parallel</a>, create a {{MediaDecodingAbility}} instance
          representing the user agent ability to decode the given
          <var>configuration</var>.
        </li>
        <li>
          Return <var>p</var>.
        </li>
      </ol>
    </p>
  </section>
</section>

<section>
  <h2 id='display-capabilities'>Display Capabilities</h2>

  <section>
    <h3 id='screen-luminance'>Screen Luminance</h3>

    <pre class='idl'>
      interface ScreenLuminance {
        readonly attribute double min;
        readonly attribute double max;
      };
    </pre>

    <p>
      The {{ScreenLuminance}} object represents the known luminance
      characteristics of the screen.
    </p>

    <p>
      The <dfn for='ScreenLuminance' attribute>min</dfn> attribute MUST return
      the minimal screen luminance that can be emmited by the screen in candela
      per square metre. The minimal screen luminance is the luminance used when
      showing the darkest color the screen can display.
    </p>

    <p>
      The <dfn for='ScreenLuminance' attribute>max</dfn> attribute MUST return
      the maximal screen luminance that can be emmited by the screen in candela
      per square metre. The maximal screen luminance is the luminance used when
      showing the whitest color the screen can display.
    </p>
  </section>

  <section>
    <h3 id='color-gamut'>Screen Color Gamut</h3>

    <pre class='idl'>
      enum ScreenColorGamut {
        "srgb",
        "p3",
        "rec2020",
      };
    </pre>

    <p>
      The {{ScreenColorGamut}} represents the color gamut supported by a
      {{Screen}}, that means the range of color that the screen can display.
    </p>

    <p>
      The {{ScreenColorGamut}} values are:
      <ul>
        <li>
          <dfn for='ScreenColorGamut' enum-value>srgb</dfn>, it represents the
          [[sRGB]] color gamut.
        </li>
        <li>
          <dfn for='ScreenColorGamut' enum-value>p3</dfn>, it represents the DCI
          P3 Color Space color gamut. This color gamut includes the
          {{ScreenColorGamut/srgb}} gamut.
        </li>
        <li>
          <dfn for='ScreenColorGamut' enum-value>rec2020</dfn>, it represents
          the ITU-R Recommendation BT.2020 color gamut. This color gamut
          includes the {{ScreenColorGamut/p3}} gamut.
        </li>
    </p>
  </section>

  <section>
    <h3 id='screen-color-depth-section'>Screen Color Depth</h3>

    <p>
      The <dfn>screen color depth</dfn> of a given <var>screen</var> is the
      the number of bits used to represent a color on the <var>screen</var>.
      Most screens will return 24. Screen able to represent wider color range
      will encode bits in more than 24 bits.
    </p>
  </section>

  <section>
    <h3 id='screen-extension'>Screen extension</h3>

    <p class='issue'>
      Part of this section is 🐵 patching of the CSSOM View Module. <a
      href='https://github.com/WICG/media-capabilities/issues/4'>Issue #4</a>
      is tracking merging the changes. This partial interface requires the
      {{Screen}} interface to become an {{EventTarget}}.
    </p>

    <pre class='idl'>
      partial interface Screen {
        readonly attribute ScreenColorGamut? colorGamut;
        readonly attribute ScreenLuminance? luminance;

        // Overriden from CSSOM View Module.
        readonly attribute unsigned long colorDepth;
        readonly attribute unsigned long pixelDepth;

        attribute EventHandler onchange;
      };
    </pre>

    <p>
      The <dfn for='Screen' attribute>colorGamut</dfn> attribute SHOULD return
      the {{ScreenColorGamut}} supported by the screen. When the screen's
      supported color gamut does not match one of the available values, the user
      agent SHOULD return a value that is fully supported by the screen if it
      can be determined. Furthermore, if the user agent does not know the color
      gamut supported by the screen, if the supported color gamut is lower than
      {{ScreenColorGamut/srgb}} or if the user agent does not want to expose
      this information for privacy consideration, it SHOULD return
      <code>null</code>.
    </p>

    <p>
      The <dfn for='Screen' attribute>luminance</dfn> attribute SHOULD return
      a {{ScreenLuminance}} object that will expose the luminance
      characteristics of the screen. If the user agent has no access to the
      luminance characteristics of the screen, it MUST return <code>null</code>.
      The user agent MAY also return <code>null</code> if it does not want to
      expose the luminance information for privacy reasons.
    </p>

    <p>
      The <dfn for='Screen' attribute>colorDepth</dfn> attribute SHOULD return
      the <a>screen color depth</a> of the {{Screen}}. The user agent MAY return
      <code>24</code> as a default value for privacy consideration.
    </p>

    <p>
      The <dfn for='Screen' attribute>pixelDepth</dfn> attribute SHOULD return
      the <a>screen color depth</a> of the {{Screen}}. The user agent MAY return
      <code>24</code> as a default value for privacy consideration.
    </p>

    <p>
      The <dfn for='Screen' attribute>onchange</dfn> attribute is an <a>event
      handler</a> whose corresponding <a>event handler event type</a> is
      <code>change</code>.
    </p>

    <p>
      Whenever the user agent is aware that the state of the {{Screen}}
      object has changed, that is if one the value exposed on the {{Screen}}
      object or in an object exposed on the {{Screen}} object, it MUST
      queue a task to <a>fire an event</a> named <code>change</code> on
      {{Screen}}.
    </p>
  </section>
</section>
